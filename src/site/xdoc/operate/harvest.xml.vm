<?xml version="1.0" encoding="UTF-8"?>

<document>
<properties>
  <title>Harvest Operation</title>
</properties>

<body>

<section name="Harvest">

<p>
<ul>
  <li><a href="#Overview">Overview</a></li>
  <li><a href="#Quick_Start">Quick Start</a></li>
  <li><a href="#InputDirs">Input Directories and Filters</a></li>
  <ul>
    <li><a href="#MultiDirs">Multiple Directories</a></li>
    <li><a href="#FileFilter">Filtering Files</a></li>
    <li><a href="#SubDirs">Excluding Sub-Directories</a></li>
    <li><a href="#ProdFilter">Filtering Products</a></li>
  </ul>
  <li><a href="#Extract">Extract More Metadata</a></li>
  <ul>
    <li><a href="#FileInfo">Basic File Information</a></li>
    <li><a href="#BLOB">BLOB Storage</a></li>
    <li><a href="#FileRef">File Reference / Access URL</a></li>
    <li><a href="#IntRefs">Internal References</a></li>
    <li><a href="#XPath">Extract Metadata by XPath</a></li>
    <li><a href="#DDic">Extract Metadata by Data Dictionary Class</a></li>
  </ul>
</ul>
</p>

<subsection name="Overview">

<p>
Harvest is a command-line tool for extracting metadata from PDS4 products (labels).
It parses PDS4 files and stores extracted metadata in an intermediate XML file.
This intermediate file can be loaded into Solr by Registry Manager or standard Solr tools, 
such as Solr post tool.
</p>
<p>
Harvest executable scripts for Windows (<i>harvest.bat</i>) and Linux / Mac (<i>harvest</i>) 
are located in <i>bin</i> sub-folder of the installation directory (e.g., <i>/home/pds/harvest/</i>).
</p>
<p>
To see the basic usage information (shown below) run Harvest without any parameters.
</p>
<source>
usage: harvest &lt;options&gt;
 -c  &lt;file&gt;    Harvest configuration file.
 -l  &lt;file&gt;    Log file. Default is /tmp/harvest/harvest.log.
 -o  &lt;dir&gt;     Output directory for Solr documents. Default is /tmp/harvest/solr
 -v  &lt;level&gt;   Logger verbosity: 0=Debug, 1=Info (default), 2=Warning, 3=Error.
</source>

</subsection>
</section>

<!-- ========================================================== -->

<section name="Quick Start">
<p>
To run Harvest you need an XML configuration file. 
The configuration file has several sections which control which folders and files the Harvest tool 
will crawl and what data to extract. Very basic configuration is shown below.
<source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;harvest&gt;
  &lt;directories&gt;
    &lt;path&gt;/data/LADEE/ldex_20161118&lt;/path&gt;
    &lt;fileFilter&gt;
      &lt;include&gt;*.xml&lt;/include&gt;
    &lt;/fileFilter&gt;
  &lt;/directories&gt;
&lt;/harvest&gt;
</source>
</p>

<p>
If you save this file as <i>/tmp/ladee.cfg</i> and run Harvest
<source>
harvest -c /tmp/ladee.cfg
</source>
</p>

<p> 
all XML files in <i>/data/LADEE/ldex_20161118</i> folder and its subfolders will be processed.
By default, Harvest extracts only few metadata fields, such as lid, vid, title, and product class.
Extracted metadata is saved in <i>solr-docs.xml</i> file. 
Default output directory is <i>/tmp/harvest/solr/</i>.
The file contains a list of Solr documents in XML format whch can be loaded into Solr by Registry Manager 
or standard Solr tools. An example Solr document is shown below.

<source>
&lt;doc&gt;
  &lt;field name="lid">urn:nasa:pds:ladee_ldex&lt;/field>
  &lt;field name="vid">1.2&lt;/field>
  &lt;field name="lidvid">urn:nasa:pds:ladee_ldex::1.2&lt;/field>
  &lt;field name="title">LADEE LUNAR DUST EXPERIMENT&lt;/field>
  &lt;field name="product_class">Product_Bundle&lt;/field>
  &lt;field name="_package_id">8627271a-01f5-49ad-8ce5-69f78fd6b5f4&lt;/field>
&lt;/doc&gt;
</source>
</p>

<subsection name="Package ID">
<p>
Each Harvest run generates unique package ID, stored in <i>_package_id</i> field.
After loading extracted metadata into Solr, all documents from a particular Harvest run can be 
deleted by this package id.
</p>
</subsection>

</section>


<!-- ====================================================================== -->

<section name="Input Directories and Filters" id="InputDirs">

<subsection name="Crawl Products from Multiple Directories" id="MultiDirs">
<p>
To process products from multiple directories, specify multiple &lt;path&gt; entries in Harvest configuration file:
<source>
&lt;harvest&gt;
  &lt;directories&gt;
    &lt;path&gt;/data/LADEE/ldex_20161118/data_calibrated&lt;/path&gt;
    &lt;path&gt;/data/LADEE/ldex_20161118/data_derived&lt;/path&gt;
...
&lt;/harvest&gt;
</source>
</p>
</subsection>

<subsection name="Filtering Files" id="FileFilter">
<p>
This feature has limited functionality since all PDS4 product labels are XML files and
Harvest could not process other files. Usually you would include the following file filter in most 
Harvest configuration files:
<source>
&lt;harvest&gt;
  &lt;directories&gt;
...
    &lt;fileFilter&gt;
      &lt;include&gt;*.xml&lt;/include&gt;
    &lt;/fileFilter&gt;
  &lt;/directories&gt;
&lt;/harvest&gt;
</source>
If you don't provide any filters, Harvest will try to pocess every file and for non-XML files you will see
"Unsupported MIME type" log messages.
</p>
<p>
You can use one or more &lt;include&gt; filters or one or more &lt;exclude&gt; filters, but not both.
</p>

</subsection>

<subsection name="Excluding Sub-Directories" id="SubDirs">
<p>
For example, to exclude <i>xml_schema</i> sub-folder, add a directory filter in Harvest configuration file:
<source>
&lt;harvest&gt;
  &lt;directories&gt;
...
    &lt;directoryFilter&gt;
      &lt;exclude&gt;xml_schema&lt;/exclude&gt;
    &lt;/directoryFilter&gt;
  &lt;/directories&gt;
&lt;/harvest&gt;
</source>
There is no include option for sub-directories.
</p>

</subsection>

<subsection name="Filtering Products" id="ProdFilter">
<p>
You can include or exclude products. For example, to only process documents, add following 
product filter in Harvest configuration file:
</p>
<source>
&lt;harvest&gt;
  &lt;directories&gt;
...
    &lt;productFilter&gt;
      &lt;include&gt;Product_Document&lt;/include&gt;
    &lt;/productFilter&gt;
  &lt;/directories&gt;
&lt;/harvest&gt;
</source>

</subsection>

</section>


<!-- ===================================================== -->

<section name="Extracting More Metadata" id="Extract">

<subsection name="Basic File Information" id="FileInfo">

<p>
To extracts basic file information, such as file name, type, size, and MD5 hash, 
include the following section in the configuration file.
<source>
&lt;fileInfo /&gt;
</source>
</p>

<p>
Now if you run Harvest, the following fields will be extracted in addition to other fields discussed above.
<source>
  &lt;field name="_file_name">bundle_ladee_ldex.xml&lt;/field>
  &lt;field name="_file_type">application/xml&lt;/field>
  &lt;field name="_file_size">5735&lt;/field>
  &lt;field name="_file_md5">zlYAt05W/Ag6Qy4HlNYy+g==&lt;/field>
</source>
</p>
</subsection>

<!-- =========== -->

<subsection name="BLOB Storage" id="BLOB">

<p>
You can store whole PDS product labels as BLOBs (Binary Large OBjects). 
To enable this feature modify <i>fileInfo</i> section in Harvest configuration file.
<source>
&lt;fileInfo&gt;
  &lt;blobStorage type="embedded" /&gt;
&lt;/fileInfo&gt;
</source>
</p>

<p>
After running Harvest, <i>solr-docs.xml</i> file will have <i>_file_blob</i> field with zipped product label. 
You can expect up to 900% compression rate for some files. 
For example, many LADEE housekeeping labels are about 45KB. BLOB size is about 5KB.
For smaller files, such as collection labels, compression rate is about 350% (5.5KB file is compressed to 1.6KB).
</p>

<p>
After loading data into Solr, you can extract BLOBs by running Registry Manager tool:
<source>
registry-manager export-file -lidvid urn:nasa:pds:ladee_ldex:data_calibrated::1.2 -filePath /tmp/data_calibrated.xml
</source>
</p>

</subsection>


<!-- ====================================== -->

<subsection name="File Reference / Access URL" id="FileRef">
<p>
To store full path of a product label file, add the following section in Harvest configuration file.
<source>
&lt;fileRef/&gt;
</source>
</p>
<p>
After running Harvest, you should see <i>_file_ref</i> field added to each Solr document:
<source>
&lt;doc&gt;
...
  &lt;field name="_file_ref">/C:/data/LADEE/ldex_20161118/bundle_ladee_ldex.xml&lt;/field>
...
&lt;/doc&gt;
</source>
</p>
<p>
Note that on Windows, backslashes are replaced with forward slashes and disk letter is included.
</p>

<p>
To replace file path prefix with another value, let's change &lt;fileRef/&gt; tag in Harvest configuration file:
<source>
&lt;fileRef&gt;
  &lt;replace prefix="/C:/data/LADEE/" replacement="https://pds.nasa.gov/data/pds4/" /&gt;
&lt;/fileRef&gt;
</source>
</p>

<p>
Now, after running Harvest, you shoul see different <i>_file_ref</i> value:
<source>
&lt;doc&gt;
...
  &lt;field name="_file_ref">https://pds.nasa.gov/data/pds4/ldex_20161118/bundle_ladee_ldex.xml&lt;/field>
...
&lt;/doc&gt;
</source>
</p>

</subsection>

<!-- ====================================== -->

<subsection name="Internal References" id="IntRefs">

<p>
To extract all internal references, add the following section in Harvest configuration file.
<source>
&lt;internalRefs prefix="ref_"&gt;
  &lt;lidvid convertToLid="true" keep="true" /&gt;
&lt;/internalRefs&gt;
</source>
</p>

<p>
Example output is shown below.
<source>
  &lt;field name="ref_lid_document"&gt;urn:nasa:pds:ladee_uvs:document:DPSIS&lt;/field&gt;
  &lt;field name="ref_lid_instrument"&gt;urn:nasa:pds:context:instrument:instrument.uvs__ladee&lt;/field&gt;
  &lt;field name="ref_lid_investigation"&gt;urn:nasa:pds:context:investigation:mission.ladee&lt;/field&gt;
  &lt;field name="ref_lid_product"&gt;urn:nasa:pds:ladee_uvs:calibration:wavelength&lt;/field&gt;
  &lt;field name="ref_lid_product"&gt;urn:nasa:pds:ladee_uvs:raw:0016o_0000&lt;/field&gt;
  &lt;field name="ref_lid_target"&gt;urn:nasa:pds:context:target:satellite.moon&lt;/field&gt;
  &lt;field name="ref_lidvid_product"&gt;urn:nasa:pds:ladee_uvs:calibration:wavelength::1.0&lt;/field&gt;
  &lt;field name="ref_lidvid_product"&gt;urn:nasa:pds:ladee_uvs:raw:0016o_0000::1.0&lt;/field&gt;
</source>
</p>

<p>
The format of generated field names is as follows:
<source>
&lt;prefix&gt;&lt;lid or lidvid&gt;_&lt;reference type&gt;
</source>
</p>

<p>
Prefix is configurable. Lidvids can be converted to lids. 
If <i>keep</i> attribute is <i>true</i> as in the example above, both original lidvid and generated lid references are saved. 
If <i>keep</i> attribute is <i>false</i>, then only lid reference is saved.
</p>


</subsection>


<!-- ====================================== -->

<subsection name="Extract Metadata by XPath" id="XPath">

<p>
To extract metadata by XPath, you have to create one or more mapping files and list them 
in Harvest configuration file as shown below.
<source>
&lt;harvest&gt;
...
  &lt;xpathMaps baseDir="/home/pds/harvest/conf"&gt;
    &lt;xpathMap filePath="common.xml" /&gt;
    &lt;xpathMap rootElement="Product_Observational" filePath="observational.xml" /&gt;
  &lt;/xpathMaps&gt;
&lt;/harvest&gt;
</source>
</p>

<p>
In the example above there are two <i>xpathMap</i> entries. Each entry must have <i>filePath</i> attribute 
pointing to a mapping file. A path can be either absolute or relative to the <i>baseDir</i> attribute 
of the <i>xpathMaps</i> tag. The <i>baseDir</i> attribute is optional. The same example with absolute paths
is shown below.
<source>
  &lt;xpathMaps&gt;
    &lt;xpathMap filePath="/home/pds/harvest/conf/common.xml" /&gt;
    &lt;xpathMap rootElement="Product_Observational" filePath="/home/pds/harvest/conf/observational.xml" /&gt;
  &lt;/xpathMaps&gt;
</source>
</p>

<p>
An <i>xpathMap</i> entry can have optional <i>rootElement</i> attribute. 
Without this attribute, XPaths queries defined in a mapping file (<i>common.xml</i>),
will run against every XML document processed by Harvest.
With <i>rootElement</i> attribute, only XMLs with that root element will be processed.
</p>

<h4>Mapping Files</h4>

<p>
A mapping file has one or more entries which map an output field name to an XPath query.
For example, to extract <i>start_date_time</i> and <i>stop_date_time</i> from observational products,
you can use the following file.
</p>

<source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;xpaths&gt;
  &lt;xpath fieldName="start_date_time"&gt;/Product_Observational/Observation_Area/Time_Coordinates/start_date_time&lt;/xpath&gt;
  &lt;xpath fieldName="stop_date_time"&gt;/Product_Observational/Observation_Area/Time_Coordinates/stop_date_time&lt;/xpath&gt;
&lt;/xpaths&gt;
</source>

<p>
You can use optional <i>dataType="date"</i> attribute to convert valid PDS dates to 
ISO-8601 "instant" format required by Apache Solr (e.g., "2013-10-24T00:49:37.457Z").
</p>

<source>
&lt;xpaths&gt;
  &lt;xpath fieldName="start_date_time" dataType="date"&gt;/Product_Observational/Observation_Area/Time_Coordinates/start_date_time&lt;/xpath&gt;
  &lt;xpath fieldName="stop_date_time" dataType="date"&gt;/Product_Observational/Observation_Area/Time_Coordinates/stop_date_time&lt;/xpath&gt;
&lt;/xpaths&gt;
</source>

<h4>XML Name Spaces</h4>
<p>
Harvest ignores namespaces when extracting metadata by XPath.
Below is a fragment of LADEE UVS product label which uses "ladee" namespace for mission area fields.
</p>

<source>
  &lt;Observation_Area&gt;
    &lt;Mission_Area&gt;
      &lt;ladee:latitude&gt;17.2367925372247&lt;/ladee:latitude&gt;
      &lt;ladee:longitude&gt;194.054477731391&lt;/ladee:longitude&gt; 
      ...
</source>

<p>
To extract latitude and longitude you can use the following XPaths without namespaces.
</p>

<source>
&lt;xpaths&gt;
  &lt;xpath fieldName="latitude"&gt;//Mission_Area/latitude&lt;/xpath&gt;
  &lt;xpath fieldName="longitude"&gt;//Mission_Area/longitude&lt;/xpath&gt;
&lt;/xpaths&gt;
</source>

</subsection>

<!-- ====================================== -->

<subsection name="Extract Metadata by Data Dictionary Class / Extract All Fields" id="DDic">

<p>
Harvest can automatically flatten out XML files and generate field names using the following naming convention:
</p>
<source>
&lt;namespace&gt;.&lt;class name&gt;.&lt;namespace&gt;.&lt;attribute name&gt;
</source>

<p>
For example
</p>
<source>
  &lt;field name="pds.Investigation_Area.pds.name"&gt;LADEE&lt;/field&gt;
  &lt;field name="pds.Investigation_Area.pds.type"&gt;Mission&lt;/field&gt;
  &lt;field name="pds.Mission_Area.ladee.activity_number"&gt;16&lt;/field&gt;
  &lt;field name="pds.Mission_Area.ladee.activity_type"&gt;Occultation&lt;/field&gt;
  &lt;field name="pds.Mission_Area.ladee.altitude"&gt;245.731087458064&lt;/field&gt;
</source>

<p>
The same naming convention is used by PDS4 data dictionaries in JSON format, available at 
<a href="https://pds.nasa.gov/datastandards/dictionaries/" target="_blank">PDS website</a>.
</p>

<p>
To extract all fields, add the following section in Harvest configuration file.
</p>
<source>
  &lt;autogenFields /&gt;
</source>

<p>
To extract a subset of fields, add <i>classFilter</i> section which can have a list of 
either include or exclude filters (but not both). The following example will extract all fields from mission area.
</p>
<source>
  &lt;autogenFields&gt;
    &lt;classFilter&gt;
      &lt;include&gt;pds.Mission_Area&lt;/include&gt;
    &lt;/classFilter&gt;
  &lt;/autogenFields&gt;
</source>

<h4>Date Fields</h4>
<p>
Harvest will try to convert all fields containing "date" string in their names to 
ISO-8601 "instant" format required by Apache Solr (e.g., "2013-10-24T00:49:37.457Z").
If a field value could not be converted to ISO-8601 format, a warning message will be printed 
and original value will be saved.
</p>

</subsection>


</section>


</body>
</document>
