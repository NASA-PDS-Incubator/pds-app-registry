<?xml version="1.0" encoding="UTF-8"?>

<document>
<properties>
  <title>Registry Customization</title>
</properties>

<body>

<section name="Registry Customization">

<!-- ========================================================== -->

<subsection name="Default Configuration Overview">
<p>
By default, PDS Registry stores its data in Elasticsearch index called "registry".
Registry Manager comes with default Elasticsearch schema <i>REGISTRY_HOME/elastic/registry.json</i>.
(<i>REGISTRY_HOME</i> is a directory where you installed Registry Manager, for example
<i>/home/pds/registry</i>).
</p>

<p>
Default schema file defines few common fields such as 
<ul>
<li>lid</li>
<li>vid</li>
<li>lidvid</li>
<li>title</li>
<li>product_class</li>
<li>internal refrences</li>
</ul> 
</p>

<p>
and basic file information, such as 
<ul>
<li>file name</li>
<li>file type</li>
<li>file size</li>
<li>MD5 hash</li>
</ul>
</p>

<p>
Also, there is a binary field to store the whole label as a BLOB.
</p>

<p>
Lidvid is a primary key. If you load the same Harvest-generated data file multiple times,
existing Elasticsearch documents will be replaced with new documents with the same lidvid. 
</p>

<p>
Dynamic field mapping is disabled.
</p>
<source>
...
"mappings": {
    "dynamic": false, 
...
}
</source>

<p>
When you load data, fields not defined in Elasticsearch schema are not indexed, 
but they are available in "_source" field.
</p>

</subsection>

<!-- ========================================================== -->

<subsection name="Customization Overview">
<h4>Adding More Fields</h4>
<p>
Default configuration defines just a few common fields and dynamic field mapping is disabled. 
You could either enable dynamic mapping or add more fields to the schema.
Note that by default you could not have more than 1000 fields per index. 
</p>

<h4>Using Multiple Collections</h4>
<p>
You could store original PDS labels (in a BLOB field) and some basic metadata in the "registry" collection.
In addition to that you could have "search" collection with more fields and only the latest version of the labels.
</p>

<h4>Full Text Search Customization</h4>
<p>
To optimize full text search, you may want to customize Elasticsearch index and query-time analyzers (filters, tokenizers),
define Elasticsearch copy fields or configure Harvest to merge multiple fields.
</p>
</subsection>
 	
<!-- ========================================================== -->

<subsection name="Adding More Fields">

<p>
Detailed information about Elasticsearch fields and schema design is available at 
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html" target="_blank">Elastic website</a>.
</p>

<!-- ============= -->

<h4>Manually editing schema file</h4>

<p>
Either edit default <i>REGISTRY_HOME/elastic/registry.json</i> file or create a copy.
</p>

<p>
The following example shows how to add <i>start_date_time</i> and <i>stop_date_time</i> fields.
<source>
{
...
  "mappings": {
...
    "properties": {
...
      "start_date_time": { "type": "date" },
      "stop_date_time": { "type": "date" }
    }
  }
}
</source>
</p>

<p>
To apply the changes you have to delete the registry index and all its data! 
<source>
registry-manager delete-registry
</source>
</p>

<p>
and then recreate the index.
<source>
registry-manager create-registry
</source>
</p>

<p>
If you copied default schema file, pass new file name in <i>-schema</i> parameter to Registry Manager.
</p>
<source>
registry-manager create-registry -schema /my-folder/test.json
</source>

<p>
You can also customize index name and Elasticsearch URL.
</p>
<source>
registry-manager create-registry -index /tmp/test.json -index test1 -es https://myhost:9200
</source>

<!-- ============= -->

<h4>Adding fields dynamically</h4>

<p>
You can add and delete fields dynamically by calling Elasticsearch mapping API. 
For example, to add <i>start_date_time</i> field call
<source>
curl -X PUT "localhost:9200/registry/_mapping?pretty" -H 'Content-Type: application/json' -d'
{
  "properties": {
    "start_date_time": { "type": "date" }
  }
}
'
</source>
</p>

<!-- ============= -->

<h4>Generating Elasticsearch fields from PDS4 data dictionaries</h4>
<p>
Registry manager can generate Elasticsearch schema from one or more PDS4 data dictionaries.
Only data dictionaries in JSON format are supported.
Latest versions of PDS4 data dictionaries in different formates are available at 
<a href="https://pds.nasa.gov/datastandards/dictionaries/" target="_blank">PDS website</a>.
</p>

<h5>Getting Started</h5>

<p>
Let's extract autoexposure fields from imaging data dictionary, <i>PDS4_IMG_1D00_1700.JSON</i>.
</p>

<p>
First, create a configuration file and save it as <i>/tmp/example.xml</i>.
<source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;schemaGen&gt;

  &lt;dataDictionary baseDir="/tmp/schema"&gt;
    &lt;file&gt;PDS4_IMG_1D00_1700.JSON&lt;/file&gt;
  &lt;/dataDictionary&gt;

  &lt;classFilters&gt;
    &lt;include&gt;img.Autoexposure&lt;/include&gt;
  &lt;/classFilters&gt;

&lt;/schemaGen&gt;
</source>
</p>

<p>
The file has several sections. Data dictionary sections lists all dictionary files to be processed.
This section is required and should contain one or more data dictionary files.
In this example, imaging data dictionary <i>PDS4_IMG_1D00_1700.JSON</i> is located in <i>/tmp/schema</i> folder.
If you want to use different folder or file, adjust your configuration file accordingly.
</p>

<p>
Class filter section is optional. Without this section, all classes and its attributes from data dictionary will be
processed. You can limit number of classes by providing either include or exclude filters, but not both.
In this example only <i>img.Autoexposure</i> class and its attributes will be processed.
Note that class name includes <i>img</i> namespace.
</p>

<p>
Run <i>generate-schema</i> registry manager command to generate Elasticsearch schema.
</p>
<source>
registry-manager generate-schema -config /tmp/example.xml
</source>

<p>
By default, generated schema is saved in <i>/tmp/registry/schema.json</i> file. 
You can change default location by providing <i>-file</i> parameter. For example,
</p>
<source>
registry-manager generate-schema -config /tmp/example.xml -file /home/pds4/my-schema.json
</source>

<p>
Example <i>schema.json</i> file is shown below.
<source>
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 0
  },
  "mappings": {
    "properties": {
      "img/Autoexposure/img/auto_exposure_data_cut": {
        "type": "integer"
      },
      "img/Autoexposure/img/active_flag": {
        "type": "boolean"
      },
      "img/Autoexposure/img/auto_exposure_percent": {
        "type": "double"
      },
      "img/Autoexposure/img/processing_venue": {
        "type": "keyword"
      },
      "img/Autoexposure/img/auto_exposure_pixel_fraction": {
        "type": "double"
      },
      "img/Autoexposure/img/processing_algorithm": {
        "type": "keyword"
      },
      "img/Autoexposure/img/max_auto_exposure_iteration_count": {
        "type": "integer"
      },
      "img/Autoexposure/img/sequence_number": {
        "type": "keyword"
      }
    }
  }
}
</source>
</p>

<p>
The following naming convention is used for generated Elasticsearch fields:
<source>
&lt;namespace&gt;/&lt;class name&gt;/&lt;namespace&gt;/&lt;attribute name&gt;
</source>
</p>

<p>
Note that data dictionaries and class filters in configuration files use '.' as a separator between a namespace 
and a class name, for example,
</p>
<source>
img.Autoexposure
</source>

<p>
In Elasticsearch dots in field names represent nested object types. 
Therefore we had to use '/' as a separator to define simple "flat" fields.
</p>


<h5>Data Type Map</h5>

<p>
You might have noticed few warnings when running registry manager.
<source>
[WARN] No PDS to Elasticsearch data type mapping for 'pds.ASCII_Integer'. Will use 'integer'
[WARN] No PDS to Elasticsearch data type mapping for 'pds.ASCII_Boolean'. Will use 'boolean'
[WARN] No PDS to Elasticsearch data type mapping for 'pds.ASCII_Real'. Will use 'double'
[WARN] No PDS to Elasticsearch data type mapping for 'pds.ASCII_Short_String_Collapsed'. Will use 'keyword'
</source>
</p>

<p>
Attributes in data dictionary files have PDS data types, such as <i>pds.ASCII_Integer</i>.
Registry manager will try to convert PDS data types to Elasticsearch data types automatically.
You can also provide your own mappings.
</p>

<p>
Add the following section in the configuration file (<i>/tmp/example.xml</i>):
<source>
  &lt;dataTypes baseDir="/tmp/schema"&gt;
    &lt;file&gt;data-types.cfg&lt;/file&gt;
  &lt;/dataTypes&gt;
</source>
</p>

<p>
And another file, <i>/tmp/schema/data-types.cfg</i> with mappings.
<source>
pds.ASCII_Integer = integer
pds.ASCII_Boolean = boolean
pds.ASCII_Real = double
pds.ASCII_Short_String_Collapsed = keyword
</source>
</p>

<p>
The format of this file is very simle:
</p>
<source>
&lt;PDS data type with namespace&gt; = &lt;Elasticsearch data type&gt;
</source>

<h5>Custom Generators</h5>
<p>
Instead of automatically generating Elasticsearch fields from data dictionary class attributes, you can define
custom generators per data dictionary class.
</p>
<p>
First, let's use a configuration file without custom generators (/tmp/example.xml):
</p>
<source>
&lt;schemaGen&gt;
  &lt;dataDictionary baseDir="/tmp/schema"&gt;
    &lt;file&gt;PDS4_PDS_JSON_1D00.JSON&lt;/file&gt;
  &lt;/dataDictionary&gt;
  &lt;classFilters&gt;
    &lt;include&gt;pds.Observing_System_Component&lt;/include&gt;
  &lt;/classFilters&gt;
&lt;/schemaGen&gt;
</source>

<p>
If you run Solr schema generator
</p>
<source>
registry-manager generate-solr-schema -config /tmp/example.xml
</source>

<p>
The following fields will be generated:
<source>
&lt;field name="pds.Observing_System_Component.pds.name" type="string" indexed="true" stored="true" multiValued="true" required="false" /&gt;
&lt;field name="pds.Observing_System_Component.pds.type" type="string" indexed="true" stored="true" multiValued="true" required="false" /&gt;
&lt;field name="pds.Observing_System_Component.pds.description" type="text_general" indexed="true" stored="true" multiValued="true" required="false" /&gt;
</source>
</p>

<p>
Now, let's add the following section to the main configuration file (<i>/tmp/example.xml</i>)
<source>
&lt;customGenerators baseDir="/tmp/schema"&gt;
  &lt;class name="pds.Observing_System_Component" file="Observing_System_Component.cfg" /&gt;
&lt;/customGenerators&gt;
</source>
</p>

<p>
and another custom generator file, <i>/tmp/schema/Observing_System_Component.cfg</i>
<source>
instrument_name = string
spacecraft_name = string
</source>
</p>

<p>
The format of this file is very simle:
</p>
<source>
&lt;Solr field name&gt; = &lt;Solr data type&gt;
</source>

<p>
If you run Solr schema generator
</p>
<source>
registry-manager generate-solr-schema -config /tmp/example.xml
</source>

<p>
The following custom fields will be generated:
<source>
&lt;field name="instrument_name" type="string" indexed="true" stored="true" multiValued="true" required="false" /&gt;
&lt;field name="spacecraft_name" type="string" indexed="true" stored="true" multiValued="true" required="false" /&gt;
</source>
</p>

<!-- ============= -->

<h4>Updating Elasticsearch schema from PDS4 data dictionaries</h4>

<p>
To update Elasticsearch schema dynamically, by calling Elasticsearch schema API, run the following Registry Manager command:
</p>
<source>
registry-manager update-schema -config /tmp/example.xml
</source>

<p>
This command uses the same configuration file as <i>generate-schema</i> command described in previous section.
</p>

<p>
By default, <i>"registry"</i> index of local Elasticsearch instance <i>http://localhost:9200</i> is updated.
Both index name and Elasticsearch URL are configurable as shown below:
</p>

<source>
registry-manager update-schema -config /tmp/example.xml -index test1 -es https://myhost:9200
</source>

<p>
Elasticsearch index must exist, before calling <i>update-schema</i> command.
</p>
</subsection>
</section>

</body>
</document>
